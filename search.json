[
  {
    "objectID": "pretrained-models.html",
    "href": "pretrained-models.html",
    "title": "Pretrained models",
    "section": "",
    "text": "Are these going to be links or do we want a page for each?",
    "crumbs": [
      "Pretrained models"
    ]
  },
  {
    "objectID": "Workshops/index.html",
    "href": "Workshops/index.html",
    "title": "Local Workshops",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n\n\n\n\n\n\n\n\nIntroduction to Deep Learning with Keras\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Local Workshops"
    ]
  },
  {
    "objectID": "ML-stories/index.html",
    "href": "ML-stories/index.html",
    "title": "ML Stories",
    "section": "",
    "text": "Are you currently immersed in an exciting ML project? We want to hear about it! Share your insights, challenges, and successes by contributing a blog post to Nexus, the ML+X resource sharing platform.\nWhether you‚Äôre exploring ML applications in biology, engineering, social sciences, or any other field, your unique perspective is invaluable. Showcase your innovation, research, and creativity to inspire others in the ML+X community.\nDon‚Äôt miss this opportunity to amplify your work and connect with fellow enthusiasts. Submit your blog post today and be part of the ML+X conversation at UW-Madison!\nGet started by [insert contribution instructions].\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n\n\n\n\n\n\n\n\n\n\nExample 1\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "ML stories"
    ]
  },
  {
    "objectID": "EDA-examples/index.html",
    "href": "EDA-examples/index.html",
    "title": "Exploratory analysis",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n\n\n\n\n\n\n\n\n\n\nEDA example\n\n\n\n\n\nAnother EDA example\n\n\n\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nAn Example\n\n\n\n\n\nAn exploratory data analysis example \n\n\n\n\n\n1 min\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Exploratory analysis"
    ]
  },
  {
    "objectID": "how-to-contribute.html",
    "href": "how-to-contribute.html",
    "title": "How to contribute?",
    "section": "",
    "text": "Nexus is the ML+X community‚Äôs centralized resource hub for individuals interesting in advancing their knowledge and skill in machine learning (ML) and related fields (X). Moreover, we want Nexus to serve also as a place where members of the community can share their knowledge. This guide answers the question, how to contribute to the ML+X-Nexus?\nWe want to site to have:\nüìú Guides: Explore a vast library of ML guides covering a wide range of topics, from foundational concepts to advanced techniques. Written by community members, these guides offer clear explanations, practical examples, and actionable insights to help you navigate the complexities of ML with confidence.\nüèÜ ML Stories: Discover a curated collection of blogs which dive into real-world experiences and lessons learned by ML practitioners.\nüöÄ Exploratory data analysis (EDA) case studies: As the adage goes, ‚Äúgarbage in, garbage out,‚Äù emphasizing the critical role of EDA in ensuring the quality and integrity of any ML pipeline. These case studies offer firsthand experiences in navigating real-world datasets, demonstrating the technical steps and domain knowledge needed to explore different data types (time-series, tabular, images, etc.) from various fields."
  },
  {
    "objectID": "how-to-contribute.html#external-versus-original-content",
    "href": "how-to-contribute.html#external-versus-original-content",
    "title": "How to contribute?",
    "section": "External versus original content",
    "text": "External versus original content\nNexus is primarily intended to host original content that is either (a) difficult to find elsewhere online or (b) unique/relevant to work conducted at UW-Madison. However, we welcome contributors to add useful external resources (links to other useful guides and blogs) to the ‚ÄúExternal‚Äù page on Nexus."
  },
  {
    "objectID": "how-to-contribute.html#how-to-make-a-post-with-github",
    "href": "how-to-contribute.html#how-to-make-a-post-with-github",
    "title": "How to contribute?",
    "section": "How to make a post with GitHub?",
    "text": "How to make a post with GitHub?\nWe follow GitHub‚Äôs collaboration model, so the general idea to make a post or edit a document is the same:\n\nFork the ML+X-Nexus repository repository.\nClone that repository into your system of preference\nCreate a new branch\nMake the post, commit the changes, and make a pull request\n\nThese are many links and if you don‚Äôt know how to use Git / GitHub, is could be a bit startling. A friendlier alternative could be to download GitHub desktop and setup the repository by following Chris‚Äôs guide."
  },
  {
    "objectID": "how-to-contribute.html#where-to-locate-your-post",
    "href": "how-to-contribute.html#where-to-locate-your-post",
    "title": "How to contribute?",
    "section": "Where to locate your post?",
    "text": "Where to locate your post?\nWe want the site to be constantly evolving with the community, and our intention is to keep the contributions to the site as free as possible. However, we added some sections that to structure the site a little bit:\n.\n‚îú‚îÄ‚îÄ EDA-examples\n‚îú‚îÄ‚îÄ Guides\n‚îú‚îÄ‚îÄ external-guides.qmd\n‚îú‚îÄ‚îÄ ML-stories\n‚îî‚îÄ‚îÄ Workshops\nWe conceptualize the contents for each section to be:\n\nEDA-examples: Examples for exploratory dat analysis. There are multiple types of data, and ML can be applied in many different fields, so we want to have examples of how the members of the community initially approach a data problem.\nGuides and external-guides: This is a bit self-explanatory. However, we dont‚Äôt want to reinvent the wheel, so if the guide is not available anywhere else or could be anything unique to the ML practice at UW this is the place for that guide. Alternatively, if the guide is useful, but someone else already wrote it, posting the link in the external-guides file is sufficient.\nML-stories: We want to know about your research, and probably we are not the only ones. This is the place to informally write about your research and share it with the community."
  },
  {
    "objectID": "how-to-contribute.html#how-to-write-the-post",
    "href": "how-to-contribute.html#how-to-write-the-post",
    "title": "How to contribute?",
    "section": "How to write the post?",
    "text": "How to write the post?\nTo write a post, there are many alternatives: Write it using quarto, rmarkdown, or jupyter. The post could be a new file in the folder, or a named folder with an index.[ipynb|qmd|rmd|md] extension. In any case, the header of the post needs to be a yaml section witht the fields:\n---\ntitle: An Example\ndescription: |\n  An exploratory data analysis example\nauthor: ML+X\ndate-modified: \"last-modified\"\ndate-format: long\ncategories:\n  - EDA\n  - PCA\n---\nThe only fields that need to be changed are title, description, author and the categories. Ideally the categories should match the tags that are already in use in the site, e.g.¬†if tag that we are using for support vector machines is SVM then use that one instead of writing another one like support-vector-machines."
  },
  {
    "objectID": "how-to-contribute.html#sec-terminology",
    "href": "how-to-contribute.html#sec-terminology",
    "title": "How to contribute?",
    "section": "Extra: Essential Git Terminology:",
    "text": "Extra: Essential Git Terminology:\nThis section was copied from Chris‚Äôs guide on How to use Git/Github Demo\n\nRepository == repo: A project that is tracked via git/GitHub\n\nRemote repo: A git project that is stored on GitHub\nLocal repo: A git project that has been downloaded to your local machine\n\nClone: Cloning is the process of making a copy of a remote repo on your local machine. This allows you to work on the project locally and perform tasks like commits, branches, and pulls.\nCommit: A git command that marks the completion of new work to a repo (e.g., add a new script, add a feature, fill out README). You can always recover previous versions of your work by loading up a previous commit.\nPush: A git command that sends local changes (commits) stored in your local repo to the remote repo.\nPull: A git command that allows you to update your local repo based on changes made to the remote repo (e.g., if your colleague pushes to the remote repo)\nBranch: A branch in Git is a parallel line of development that allows you to work on features, bug fixes, or experiments without affecting the main codebase. You can create and switch between branches to isolate your work.\nMerge: Merging is the process of integrating changes from one branch into another. This is typically done to combine the changes made in a feature branch with the main branch (e.g., main or master).\nPull Request (PR): A pull request is a feature provided by platforms like GitHub, GitLab, and Bitbucket. It‚Äôs a way to propose changes (commits) to a project. Others can review the changes, and once approved, they can be merged into the main branch.\nFork: Forking a repository means creating a copy of someone else‚Äôs project in your GitHub account. This allows you to make changes independently and propose those changes back to the original project via pull requests. If everyone on your team has write-access to the repo, it‚Äôs best to use new branches instead of forks for pull requests.\nGitignore: A .gitignore file is used to specify which files and directories should be excluded from version control. It‚Äôs essential for preventing unnecessary or sensitive files from being included in the repository."
  },
  {
    "objectID": "Guides/index.html",
    "href": "Guides/index.html",
    "title": "Guides",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n\n\n\n\n\n\n\n\nUsing Reticulate\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nML Example 1: Iris flower classification\n\n\n2 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to Python Packages\n\n\n4 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to Python\n\n\n4 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to Python\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to Machine Learning\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow to get started with Visual Studio Code\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Guides"
    ]
  },
  {
    "objectID": "Guides/intro-ml/ML_Example1_Iris_flower_classification.html",
    "href": "Guides/intro-ml/ML_Example1_Iris_flower_classification.html",
    "title": "ML Example 1: Iris flower classification",
    "section": "",
    "text": "This tutorial illustrates Classification using a popular dataset (Iris Flower Dataset) in ML community. We use Matplotlib, Numpy, Pandas, Keras, Scikit-learn (sklearn) packages for this example.\n\nRead more about Classification tasks: https://machinelearningmastery.com/types-of-classification-in-machine-learning/\nScikit-learn documentation: https://scikit-learn.org/stable/\nKeras documentation: https://keras.io/api/\n\n\n\n\n\n\n\nIris flower dataset contains 50 instances of 3 classes of Iris plants(Iris-setosa, Iris-versicolor & Iris-virginica)\nGoal of Iris flower classification problem is to classify an unseen Iris plant.\nKeras and Tensorflow is used to develop neural network model for this multi-class classification problem.\nFinally, evaluating the model with kfold cross validation using scikit-learn.\n\n\n\n\nUsing pandas for data processing\nKeras to build the neural network\nSklearn to evaluate the build model using Kfold Cross Validation\n\n\nimport pandas\nimport numpy\nimport keras\nfrom sklearn import datasets\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.utils import np_utils\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.pipeline import Pipeline\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.datasets import load_iris\nimport matplotlib.pyplot as plt\n\nUsing TensorFlow backend.\n\n\nLoading the Iris dataset into pandas dataframe\nAttribute Information: 1. sepal length in cm 2. sepal width in cm 3. petal length in cm 4. petal width in cm 5. class: - Iris Setosa - Iris Versicolour - Iris Virginica\n\ndata = pandas.read_csv(\"data\\iris_dataset.csv\", header = None)\ndata.head()\n\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nIris-setosa\n\n\n1\n4.9\n3.0\n1.4\n0.2\nIris-setosa\n\n\n2\n4.7\n3.2\n1.3\n0.2\nIris-setosa\n\n\n3\n4.6\n3.1\n1.5\n0.2\nIris-setosa\n\n\n4\n5.0\n3.6\n1.4\n0.2\nIris-setosa\n\n\n\n\n\n\n\n\nLets plot the dataset\n\nplt.scatter(data.iloc[:,0:1][data[4]=='Iris-setosa'], data.iloc[:,1:2][data[4]=='Iris-setosa'], color ='green' , label='Iris-setosa')\nplt.scatter(data.iloc[:,0:1][data[4]=='Iris-versicolor'], data.iloc[:,1:2][data[4]=='Iris-versicolor'], color ='red' , label='Iris-versicolor')\nplt.scatter(data.iloc[:,0:1][data[4]=='Iris-virginica'], data.iloc[:,1:2][data[4]=='Iris-virginica'], color ='blue' , label='Iris-virginica')\nplt.title(\"Iris plant dataset\")\nplt.xlabel(\"Sepal length in cm\")\nplt.ylabel(\"Sepal width in cm\")\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\nplt.scatter(data.iloc[:, 2:3][data[4]=='Iris-setosa'], data.iloc[:, 3:4][data[4]=='Iris-setosa'], color ='green' , label='Iris-setosa')\nplt.scatter(data.iloc[:, 2:3][data[4]=='Iris-versicolor'], data.iloc[:, 3:4][data[4]=='Iris-versicolor'], color ='red' , label='Iris-versicolor')\nplt.scatter(data.iloc[:, 2:3][data[4]=='Iris-virginica'], data.iloc[:, 3:4][data[4]=='Iris-virginica'], color ='blue' , label='Iris-virginica')\nplt.title(\"Iris plant dataset\")\nplt.xlabel(\"Petal length in cm\")\nplt.ylabel(\"Petal width in cm\")\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\nSeparating data into input and output variables\n\ndataset = data.values\nX = dataset[: , 0:4]\ny = dataset[: , 4]\n\nUsing one hot encoding for multi-class classification problem\n\nencoder = LabelEncoder()\nencoder.fit(y)\nencoder_y = encoder.transform(y)\ndummy_y = np_utils.to_categorical(encoder_y)\n\nCreating baseline neural network model using keras - Built sequential model - Created simple fully connected network with one hidden layer that contains 8 neurons. - In the first layer, we are using dense layer with 8 neurons, input dimension as 4 (input features) and activation function as relu - In the second layer i.e the output layer, 3 neurons are used to predict 3 output classes(3 flower categories) with activation function as softmax\n\ndef baseline_model():\n    model = Sequential()\n    model.add(Dense(8, input_dim=4, activation='relu'))\n    model.add(Dense(3,activation='softmax'))\n    # compile the model\n    model.compile(loss = 'categorical_crossentropy', optimizer = 'adam', metrics=['accuracy'])\n    return model\n\nCreating KerasClassifier for use in scikit-learn\n\nestimator = KerasClassifier(build_fn=baseline_model, epochs=200, batch_size=5, verbose=0)\n\nEvaluation of the model created using neural networks on training data using kfold(10) validation\n\n# fix random seed for reproducibility in evaluation\nseed = 7\nnumpy.random.seed(seed)\n\n\nkfold = KFold(n_splits = 10, shuffle = True, random_state = seed)\n\n\nresults = cross_val_score(estimator, X, dummy_y, cv=kfold)\nprint(\"Baseline Prediction Accuracy: %.2f%% (%.2f%%)\" % (results.mean()*100, results.std()*100))\n\nBaseline Prediction Accuracy: 97.33% (4.42%)\n\n\n\nresults\n\narray([ 1.        ,  0.93333334,  1.        ,  1.        ,  1.        ,\n        1.        ,  1.        ,  0.93333334,  1.        ,  0.86666667])",
    "crumbs": [
      "Guides",
      "Introduction to Machine Learning",
      "ML Example 1: Iris flower classification"
    ]
  },
  {
    "objectID": "Guides/intro-ml/ML_Example1_Iris_flower_classification.html#iris-flower-classification",
    "href": "Guides/intro-ml/ML_Example1_Iris_flower_classification.html#iris-flower-classification",
    "title": "ML Example 1: Iris flower classification",
    "section": "",
    "text": "Iris flower dataset contains 50 instances of 3 classes of Iris plants(Iris-setosa, Iris-versicolor & Iris-virginica)\nGoal of Iris flower classification problem is to classify an unseen Iris plant.\nKeras and Tensorflow is used to develop neural network model for this multi-class classification problem.\nFinally, evaluating the model with kfold cross validation using scikit-learn.\n\n\n\n\nUsing pandas for data processing\nKeras to build the neural network\nSklearn to evaluate the build model using Kfold Cross Validation\n\n\nimport pandas\nimport numpy\nimport keras\nfrom sklearn import datasets\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.utils import np_utils\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.pipeline import Pipeline\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.datasets import load_iris\nimport matplotlib.pyplot as plt\n\nUsing TensorFlow backend.\n\n\nLoading the Iris dataset into pandas dataframe\nAttribute Information: 1. sepal length in cm 2. sepal width in cm 3. petal length in cm 4. petal width in cm 5. class: - Iris Setosa - Iris Versicolour - Iris Virginica\n\ndata = pandas.read_csv(\"data\\iris_dataset.csv\", header = None)\ndata.head()\n\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nIris-setosa\n\n\n1\n4.9\n3.0\n1.4\n0.2\nIris-setosa\n\n\n2\n4.7\n3.2\n1.3\n0.2\nIris-setosa\n\n\n3\n4.6\n3.1\n1.5\n0.2\nIris-setosa\n\n\n4\n5.0\n3.6\n1.4\n0.2\nIris-setosa\n\n\n\n\n\n\n\n\nLets plot the dataset\n\nplt.scatter(data.iloc[:,0:1][data[4]=='Iris-setosa'], data.iloc[:,1:2][data[4]=='Iris-setosa'], color ='green' , label='Iris-setosa')\nplt.scatter(data.iloc[:,0:1][data[4]=='Iris-versicolor'], data.iloc[:,1:2][data[4]=='Iris-versicolor'], color ='red' , label='Iris-versicolor')\nplt.scatter(data.iloc[:,0:1][data[4]=='Iris-virginica'], data.iloc[:,1:2][data[4]=='Iris-virginica'], color ='blue' , label='Iris-virginica')\nplt.title(\"Iris plant dataset\")\nplt.xlabel(\"Sepal length in cm\")\nplt.ylabel(\"Sepal width in cm\")\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\nplt.scatter(data.iloc[:, 2:3][data[4]=='Iris-setosa'], data.iloc[:, 3:4][data[4]=='Iris-setosa'], color ='green' , label='Iris-setosa')\nplt.scatter(data.iloc[:, 2:3][data[4]=='Iris-versicolor'], data.iloc[:, 3:4][data[4]=='Iris-versicolor'], color ='red' , label='Iris-versicolor')\nplt.scatter(data.iloc[:, 2:3][data[4]=='Iris-virginica'], data.iloc[:, 3:4][data[4]=='Iris-virginica'], color ='blue' , label='Iris-virginica')\nplt.title(\"Iris plant dataset\")\nplt.xlabel(\"Petal length in cm\")\nplt.ylabel(\"Petal width in cm\")\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\nSeparating data into input and output variables\n\ndataset = data.values\nX = dataset[: , 0:4]\ny = dataset[: , 4]\n\nUsing one hot encoding for multi-class classification problem\n\nencoder = LabelEncoder()\nencoder.fit(y)\nencoder_y = encoder.transform(y)\ndummy_y = np_utils.to_categorical(encoder_y)\n\nCreating baseline neural network model using keras - Built sequential model - Created simple fully connected network with one hidden layer that contains 8 neurons. - In the first layer, we are using dense layer with 8 neurons, input dimension as 4 (input features) and activation function as relu - In the second layer i.e the output layer, 3 neurons are used to predict 3 output classes(3 flower categories) with activation function as softmax\n\ndef baseline_model():\n    model = Sequential()\n    model.add(Dense(8, input_dim=4, activation='relu'))\n    model.add(Dense(3,activation='softmax'))\n    # compile the model\n    model.compile(loss = 'categorical_crossentropy', optimizer = 'adam', metrics=['accuracy'])\n    return model\n\nCreating KerasClassifier for use in scikit-learn\n\nestimator = KerasClassifier(build_fn=baseline_model, epochs=200, batch_size=5, verbose=0)\n\nEvaluation of the model created using neural networks on training data using kfold(10) validation\n\n# fix random seed for reproducibility in evaluation\nseed = 7\nnumpy.random.seed(seed)\n\n\nkfold = KFold(n_splits = 10, shuffle = True, random_state = seed)\n\n\nresults = cross_val_score(estimator, X, dummy_y, cv=kfold)\nprint(\"Baseline Prediction Accuracy: %.2f%% (%.2f%%)\" % (results.mean()*100, results.std()*100))\n\nBaseline Prediction Accuracy: 97.33% (4.42%)\n\n\n\nresults\n\narray([ 1.        ,  0.93333334,  1.        ,  1.        ,  1.        ,\n        1.        ,  1.        ,  0.93333334,  1.        ,  0.86666667])",
    "crumbs": [
      "Guides",
      "Introduction to Machine Learning",
      "ML Example 1: Iris flower classification"
    ]
  },
  {
    "objectID": "Guides/intro-python/Introduction to Python.html",
    "href": "Guides/intro-python/Introduction to Python.html",
    "title": "Introduction to Python",
    "section": "",
    "text": "Every notebook has an environment defined as the ‚Äúkernel‚Äù. We will be using the ‚ÄúPython 3‚Äù kernel.\nFor more information about Jupyter notebooks, check out this link.",
    "crumbs": [
      "Guides",
      "Introduction to Python",
      "Introduction to Python"
    ]
  },
  {
    "objectID": "Guides/intro-python/Introduction to Python.html#statements",
    "href": "Guides/intro-python/Introduction to Python.html#statements",
    "title": "Introduction to Python",
    "section": "1.1 Statements",
    "text": "1.1 Statements\nPython is an imperative language based on [statements](https://en.wikipedia.org/wiki/Statement_(computer_science)). That is, programs in Python consists of lines composed of statements. A statement can be:\n\na single expression\nan assignment\na function call\na function definition\na statement; statement\n\n\n1.1.1 Expressions\n\nNumbers\n\nintegers\nfloating-point\ncomplex numbers\n\nstrings\nboolean values\nlists and dicts\n\n\n1.1.1.1 Numbers\n\n1\n\n\n2\n\n\n-3\n\n\n1\n2\n\n\n3.14\n\n\n\n1.1.1.2 Strings\n\n'apple'\n\n\n\"apple\"\n\nNotice that the Cell Output[Out] might not match exactly the Cell Input[In]. In the above example, we used double-quotes but the representation of the string used single-quotes. Python will default to showing representations of values using single-quotes, if it can.\n\n\n1.1.1.3 Boolean Values\n\nTrue\n\n\nFalse\n\n\n\n1.1.1.4 Lists and Dicts\nPython has three very useful data structures built into the language:\n\nlists: []\ntuples: (item, ‚Ä¶)\ndictionaries (hash tables): {}\n\nList is a mutable list of items. Tuple is a read-only data structure (immutable).\n\n[1, 2, 3]\n\n\n(1, 2, 3)\n\n\n1, 2, 3\n\n\n{\"apple\": \"a fruit\", \"banana\": \"an herb\", \"monkey\": \"a mammal\"}\n\n\nsome_dict = {\"apple\": \"a fruit\", \"banana\": \"an herb\", \"monkey\": \"a mammal\"}\nsome_dict[\"apple\"]\n\nPython allows you to convert/cast/derive in-between these data structures:\n\nlist -&gt; tuple: tuple()\ntuple -&gt; list: list()\ndictionary keys: dict.keys()\ndictionary values: dict.values()\n\nFirst let‚Äôs ‚Äúdefine‚Äù some list, tuple, dictionary for our usage. (More on variable ‚Äúdefinition‚Äùs later)\n\nsome_list = [1, 2, 3]\nsome_tuple = (4, 5, 6)\nsome_dict = {\"apple\": \"a fruit\", \"banana\": \"an herb\", \"monkey\": \"a mammal\"}\n\n\nlist(some_tuple)\n\n\ntuple(some_list)\n\n\nlist(some_dict.keys())\n\n\nlist(some_dict.values())\n\n\n\n\n1.1.2 Function Calls\nThere are two ways to call functions in Python:\n\nby pre-defined infix operator name\nby function name, followed by parentheses\n\nInfix operator name:\n\n1 + 2\n\n\nabs(-1)\n\n\nimport operator\n\n\noperator.add(1, 2)\n\n\n1.1.2.1 Print\nEvaluating and display result as an Out, versus evaluating and printing result (side-effect).\n\nprint(1)\n\n\n\n\n1.1.3 Special Values\n\nNone\n\n\n\n1.1.4 Defining Functions\n\ndef plus(a, b):\n    return a + b\n\n\nplus(3, 4)\n\n\ndef plus(a, b):\n    a + b\n\n\nplus(3, 4)\n\nWhat happened? All functions return something, even if you don‚Äôt specify it. If you don‚Äôt specify a return value, then it will default to returning None.\n\n\"a\" + 1\n\n\n\nSidebar 2-1: How to Read Python Error Messages\n\n\nPython error messages\n\nTypeError: Can‚Äôt convert ‚Äòint‚Äô object to str implicitly\n\n\nAbove the error message is the ‚Äútraceback‚Äù also called the ‚Äúcall stack‚Äù. This is a representation of the sequence of procedure (function) calls that lead to the error. If the call originated from code from a file, the filename would be listed after the word ‚ÄúFile‚Äù on each line. If the call originated from a notebook cell, then the word ‚Äúipython-input-#-HEX‚Äù.",
    "crumbs": [
      "Guides",
      "Introduction to Python",
      "Introduction to Python"
    ]
  },
  {
    "objectID": "Guides/intro-python/Introduction to Python.html#equality",
    "href": "Guides/intro-python/Introduction to Python.html#equality",
    "title": "Introduction to Python",
    "section": "1.2 Equality",
    "text": "1.2 Equality\n\n1.2.1 ==\n\n1 == 1\n\n\n\n1.2.2 is\n\n[] is []\n\n\nlist() is list()\n\n\ntuple() is tuple()\n\n\n57663463467 is 57663463467",
    "crumbs": [
      "Guides",
      "Introduction to Python",
      "Introduction to Python"
    ]
  },
  {
    "objectID": "Guides/intro-python/Introduction to Python.html#python-warts",
    "href": "Guides/intro-python/Introduction to Python.html#python-warts",
    "title": "Introduction to Python",
    "section": "2.1 Python Warts",
    "text": "2.1 Python Warts\n\nhttp://web.archive.org/web/20031002184114/www.amk.ca/python/writing/warts.html\n\nhttps://www.python.org/dev/peps/pep-3099/",
    "crumbs": [
      "Guides",
      "Introduction to Python",
      "Introduction to Python"
    ]
  },
  {
    "objectID": "Guides/intro-python/Introduction to Python.html#scope-of-variables",
    "href": "Guides/intro-python/Introduction to Python.html#scope-of-variables",
    "title": "Introduction to Python",
    "section": "2.2 Scope of variables",
    "text": "2.2 Scope of variables\nIs not always clear:\n\ny = 0\nfor x in range(10):\n    y = x\n\n\nx\n\n\n[x for x in range(10, 20)]\n\n\nx",
    "crumbs": [
      "Guides",
      "Introduction to Python",
      "Introduction to Python"
    ]
  },
  {
    "objectID": "Guides/intro-python/Introduction to Python.html#scope",
    "href": "Guides/intro-python/Introduction to Python.html#scope",
    "title": "Introduction to Python",
    "section": "2.3 Scope",
    "text": "2.3 Scope\nPython follows the LEGB Rule (after https://www.amazon.com/dp/0596513984/):\n\nL, Local: Names assigned in any way within a function (def or lambda)), and not declared global in that function.\nE, Enclosing function locals: Name in the local scope of any and all enclosing functions (def or lambda), from inner to outer.\nG, Global (module): Names assigned at the top-level of a module file, or declared global in a def within the file.\nB, Built-in (Python): Names preassigned in the built-in names module : open, range, SyntaxError,‚Ä¶\n\n\nx = 3\ndef foo():\n    x=4\n    def bar():\n        print(x)  # Accesses x from foo's scope\n    bar()  # Prints 4\n    x=5\n    bar()  # Prints 5\n\n\nfoo()\n\nSee scope_resolution_legb_rule.ipynb for some additional readings on scope.",
    "crumbs": [
      "Guides",
      "Introduction to Python",
      "Introduction to Python"
    ]
  },
  {
    "objectID": "Guides/intro-python/Introduction to Python.html#generators",
    "href": "Guides/intro-python/Introduction to Python.html#generators",
    "title": "Introduction to Python",
    "section": "2.4 Generators",
    "text": "2.4 Generators\nGenerators remember the ‚Äústate‚Äù at which they ‚Äúyield‚Äù a value and continue their execution for the subsequent invocations\n\ndef function():\n    for i in range(5):\n        if i % 2 == 0:\n            print(\"Even number\")\n        else:\n            print(\"Odd number\")\n        yield i\n\n\n# First call to function()\nfunction()\n\n\n# Second call to function()\nfunction()\n\n\n# Subsequent calls to function()\nfor y in function():\n    print(y)",
    "crumbs": [
      "Guides",
      "Introduction to Python",
      "Introduction to Python"
    ]
  },
  {
    "objectID": "Guides/intro-python/Introduction to Python.html#default-arguments",
    "href": "Guides/intro-python/Introduction to Python.html#default-arguments",
    "title": "Introduction to Python",
    "section": "2.5 Default arguments",
    "text": "2.5 Default arguments\n\ndef do_something(a, b, c):\n    return (a, b, c)\n\n\ndo_something(1, 2, 3)\n\n\ndef do_something_else(a=1, b=2, c=3):\n    return (a, b, c)\n\n\ndo_something_else()\n\n\ndef some_function(start=[]):\n    start.append(1)\n    return start\n\n\nresult = some_function()\n\n\nresult\n\n\nresult.append(2)\n\n\nother_result = some_function()\n\n\nother_result",
    "crumbs": [
      "Guides",
      "Introduction to Python",
      "Introduction to Python"
    ]
  },
  {
    "objectID": "Guides/intro-python/Introduction to Python.html#list-comprehension",
    "href": "Guides/intro-python/Introduction to Python.html#list-comprehension",
    "title": "Introduction to Python",
    "section": "3.2 List comprehension",
    "text": "3.2 List comprehension\n‚ÄúList comprehension‚Äù is the idea of writing some code inside of a list that will generate a list.\nConsider the following:\n\n[x ** 2 for x in range(10)]\n\n\ntemp_list = []\nfor x in range(10):\n    temp_list.append(x ** 2)\ntemp_list\n\nBut list comprehension is much more concise.",
    "crumbs": [
      "Guides",
      "Introduction to Python",
      "Introduction to Python"
    ]
  },
  {
    "objectID": "Guides/intro-python/Introduction to Python.html#plotting",
    "href": "Guides/intro-python/Introduction to Python.html#plotting",
    "title": "Introduction to Python",
    "section": "3.3 Plotting",
    "text": "3.3 Plotting\n\n%matplotlib notebook\n\nAfter the magic, we then need to import the matplotlib library:\n\nimport matplotlib.pyplot as plt\n\nPython has many, many libraries. We will use a few over the course of the semester.\nTo create a simple line plot, just give a list of y-values to the function plt.plot().\n\nplt.plot([5, 8, 2, 6, 1, 8, 2, 3, 4, 5, 6])\n\nBut you should never create a plot that doesn‚Äôt have labels on the x and y axises, and should always have a title. Read the documentation on matplotlib and add labels and a title to the plot above:\nhttp://matplotlib.org/api/pyplot_api.html\nAnother commonly used library (especially with matplotlib is numpy). Often imported as: import numpy as np",
    "crumbs": [
      "Guides",
      "Introduction to Python",
      "Introduction to Python"
    ]
  },
  {
    "objectID": "Guides/intro-python/Introduction to Python.html#closures",
    "href": "Guides/intro-python/Introduction to Python.html#closures",
    "title": "Introduction to Python",
    "section": "2.6 Closures",
    "text": "2.6 Closures\nAre functions that capture some of the local bindings to variables.\n\ndef return_a_closure():\n    dict = {}\n    def hidden(operator, value, other=None):\n        if operator == \"add\":\n            dict[value] = other\n        else:\n            return dict[value]\n    return hidden\n\n\nthing = return_a_closure()\n\n\nthing(\"add\", \"apple\", 42)\n\n\nthing(\"get\", \"apple\")\n\n\nthing.dict\n\nWhere is dict?\nSee http://www.programiz.com/python-programming/closure for more examples.",
    "crumbs": [
      "Guides",
      "Introduction to Python",
      "Introduction to Python"
    ]
  },
  {
    "objectID": "Guides/reticulate/index.html",
    "href": "Guides/reticulate/index.html",
    "title": "Using Reticulate",
    "section": "",
    "text": "(TO add)",
    "crumbs": [
      "Guides",
      "Using Reticulate"
    ]
  },
  {
    "objectID": "Guides/intro-python/Introduction to Python Packages.html",
    "href": "Guides/intro-python/Introduction to Python Packages.html",
    "title": "Introduction to Python Packages",
    "section": "",
    "text": "Python has a rich community with lots of packages. Here, we mainly focus on Numpy, Pandas, and Matplotlib as they are the de-facto standards in the Python community.\nWhile this tutorial covers the most common functions and APIs of these packages. Always remember to check out the documentation for the most accurate and updated information: * Numpy: https://numpy.org/doc/stable/reference/index.html * Pandas: https://pandas.pydata.org/docs/reference/index.html * Matplotlib: https://matplotlib.org/stable/index.html",
    "crumbs": [
      "Guides",
      "Introduction to Python",
      "Introduction to Python Packages"
    ]
  },
  {
    "objectID": "Guides/intro-python/Introduction to Python Packages.html#data-analysis",
    "href": "Guides/intro-python/Introduction to Python Packages.html#data-analysis",
    "title": "Introduction to Python Packages",
    "section": " Data Analysis ",
    "text": "Data Analysis \nData Analysis is a process of inspecting, cleaning, transforming, and modeling data with the goal of discovering useful information, suggesting conclusions, and supporting decision-making.\nStpes for Data Analysis, Data Manipulation and Data Visualization: 1. Tranform Raw Data in a Desired Format 2. Clean the Transformed Data (Step 1 and 2 also called as a Pre-processing of Data) 3. Prepare a Model 4. Analyse Trends and Make Decisions",
    "crumbs": [
      "Guides",
      "Introduction to Python",
      "Introduction to Python Packages"
    ]
  },
  {
    "objectID": "Guides/intro-python/Introduction to Python Packages.html#numpy",
    "href": "Guides/intro-python/Introduction to Python Packages.html#numpy",
    "title": "Introduction to Python Packages",
    "section": " NumPy ",
    "text": "NumPy \nNumPy is a package for scientific computing. 1. Multi dimensional array 2. Methods for processing arrays 3. Element by element operations 4. Mathematical operations like logical, Fourier transform, shape manipulation, linear algebra and random number generation\n::: {#cell-9 .cell _uuid=‚Äò08c7be017b26d279f29cc310e8e4d963d4ae2da2‚Äô trusted=‚Äòtrue‚Äô}\nimport numpy as np\n:::\n\n Ndarray - NumPy Array \nThe ndarray is a multi-dimensional array object consisting of two parts ‚Äì the actual data, some metadata which describes the stored data. They are indexed just like sequence are in Python, starting from 0 1. Each element in ndarray is an object of data-type object called dtype 2. An item extracted from ndarray, is represented by a Python object of an array scalar type\n\n\n Single Dimensional Array \n\n\n Creating a Numpy Array \n::: {#cell-14 .cell _uuid=‚Äò5a05543b043853c0e56055efdd424ca407d21d54‚Äô trusted=‚Äòtrue‚Äô}\n# Creating a single-dimensional array\na = np.array([1,2,3]) # Calling the array function\nprint(a)\n:::\n::: {#cell-15 .cell _uuid=‚Äò6b1bb7ccac0ef9e1bb10ae32067d657f4ad41d9b‚Äô trusted=‚Äòtrue‚Äô}\n# Creating a multi-dimensional array\n# Each set of elements within a square bracket indicates a row\n# Array of two rows and two columns\nb = np.array([[1,2], [3,4]])\nprint(b)\n:::\n::: {#cell-16 .cell _uuid=‚Äòf51dd35c6086518fdee722aadadd73737a31cfca‚Äô trusted=‚Äòtrue‚Äô}\n# Creating an ndarray by wrapping a list\nlist1 = [1,2,3,4,5] # Creating a list\narr = np.array(list1) # Wrapping the list\nprint(arr)\n:::\n::: {#cell-17 .cell _uuid=‚Äòda1fb0cf270ff4952d9212593c15dc35af0c2924‚Äô trusted=‚Äòtrue‚Äô}\n# Creating an array of numbers of a specified range\narr1 = np.arange(10, 100) # Array of numbers from 10 up to and excluding 100\nprint(arr1)\n:::\n::: {#cell-18 .cell _uuid=‚Äòb4005dd1d350d82e2495c15e31a763108492f720‚Äô trusted=‚Äòtrue‚Äô}\n# Creating a 5x5 array of zeroes\narr2 = np.zeros((5,5))\nprint(arr2)\n:::\n::: {#cell-19 .cell _uuid=‚Äò0cb37460c80a903c9b30148d4316278130481d0d‚Äô trusted=‚Äòtrue‚Äô}\n# Creating a linearly spaced vector, with spacing\nvector = np.linspace(0, 20, 5) # Start, stop, step\nprint(vector)\n:::\n::: {#cell-20 .cell _uuid=‚Äòfe579e99445ed895fbf948723d1b4b3294a0f38f‚Äô trusted=‚Äòtrue‚Äô}\n# Creating Arrays from Existing Data\nx = [1,2,3]\n# Used for converting Python sequences into ndarrays\nc = np.asarray(x) #np.asarray(a, dtype = None, order = None)\nprint(c)\n:::\n::: {#cell-21 .cell _uuid=‚Äòe7d3a247e74a3e225aef62fd82f28daad313e4d0‚Äô trusted=‚Äòtrue‚Äô}\n# Converting a linear array of 8 elements into a 2x2x2 3D array\narr3 = np.zeros(8) # Flat array of eight zeroes\narr3d = arr3.reshape((2,2,2)) # Restructured array\nprint(arr3d)\n:::\n::: {#cell-22 .cell _uuid=‚Äòc30ef25050592ce5a900713de2456181e8d8da3a‚Äô trusted=‚Äòtrue‚Äô}\n# Flatten rgw 3d array to get back the linear array\narr4 = arr3d.ravel()\nprint(arr4)\n:::\n\n\n Indexing of NumPy Arrays \n::: {#cell-24 .cell _uuid=‚Äò598f958c1b21eba42ae4a5bebc3945085412c0ae‚Äô trusted=‚Äòtrue‚Äô}\n# NumPy array indexing is identical to Python's indexing scheme\narr5 = np.arange(2, 20)\nelement = arr5[6]\nprint(element)\n:::\n::: {#cell-25 .cell _uuid=‚Äò6fea915f4f4e21dba0134e29839d4c0315db87b4‚Äô trusted=‚Äòtrue‚Äô}\n# Python's concept of lists slicing is extended to NumPy.\n# The slice object is constructed by providing start, stop, and step parameters to slice()\narr6 = np.arange(20)\narr_slice = slice(1, 10, 2) # Start, stop & step\nelement2 = arr6[6]\nprint(arr6[arr_slice])\n:::\n::: {#cell-26 .cell _uuid=‚Äò60f5e32d48848bcb22cf159f7c90f4b962785897‚Äô trusted=‚Äòtrue‚Äô}\n# Slicing items beginning with a specified index\narr7 = np.arange(20)\nprint(arr7[2:])\n:::\n::: {#cell-27 .cell _uuid=‚Äò5407ed48df87cfd936330f2fdf5b6b1b8df4add9‚Äô trusted=‚Äòtrue‚Äô}\n# Slicing items until a specified index\nprint(arr7[:15])\n:::\n::: {#cell-28 .cell _uuid=‚Äò5a4e22182b627ce467d8208050fd534c74f554b5‚Äô trusted=‚Äòtrue‚Äô}\n# Extracting specific rows and columns using Slicing\nd = np.array([[1,2,3], [3,4,5], [4,5,6]])\nprint(d[0:2, 0:2]) # Slice the first two rows and the first two columns\n:::\n\n\n NumPy Array Attributes \n::: {#cell-30 .cell _uuid=‚Äò65fa3b450304e43d42ca7e749a7da9d45c287902‚Äô trusted=‚Äòtrue‚Äô}\nprint(d.shape) # Returns a tuple consisting of array dimensions\nprint(d.ndim) # Attribute returns the number of array dimensions\nprint(a.itemsize) # Returns the length of each element of array in bytes\n:::\n::: {#cell-31 .cell _uuid=‚Äòca39c694460aceb9e7a04fc746c21f618034d930‚Äô trusted=‚Äòtrue‚Äô}\ny = np.empty([3,2], dtype = int) # Creates an uninitialized array of specified shape and dtype\nprint(y)\n:::\n::: {#cell-32 .cell _uuid=‚Äò3ba1fd700bd7a9adc0f88b6edf91b0dac60ef4f4‚Äô trusted=‚Äòtrue‚Äô}\n# Returns a new array of specified size, filled with zeros\nz = np.zeros(5) # np.zeros(shape, dtype = float)\nprint(z)\n:::\n\n\n Reading & Writing from Files \n::: {#cell-34 .cell _uuid=‚Äò1d2969b2a7bb0a06a62cd3bddc55c0a0fc252f7b‚Äô trusted=‚Äòtrue‚Äô}\n# NumPy provides the option of importing data from files directly into ndarray using the loadtxt function\n# The savetxt function can be used to write data from an array into a text file\n#import os\n#print(os.listdir('../input'))\narr_txt = np.loadtxt('../input/data_file.txt')\nnp.savetxt('newfilex.txt', arr_txt)\n:::\n::: {#cell-35 .cell _uuid=‚Äòf62d1c9aa9cac65306e433bbbbe06e50a436c92e‚Äô trusted=‚Äòtrue‚Äô}\n# NumPy arrays can be dumped into CSV files using the savetxt function and the comma delimiter\n# The genfromtxt function can be used to read data from a CSV file into a NumPy array\narr_csv = np.genfromtxt('../input/Hurricanes.csv', delimiter = ',')\nnp.savetxt('newfilex.csv', arr_csv, delimiter = ',')\n:::",
    "crumbs": [
      "Guides",
      "Introduction to Python",
      "Introduction to Python Packages"
    ]
  },
  {
    "objectID": "Guides/intro-python/Introduction to Python Packages.html#pandas",
    "href": "Guides/intro-python/Introduction to Python Packages.html#pandas",
    "title": "Introduction to Python Packages",
    "section": " Pandas ",
    "text": "Pandas \nPandas is an open-source Python library providing efficient, easy-to-use data structure and data analysis tools. The name Pandas is derived from ‚ÄúPanel Data‚Äù - an Econometrics from Multidimensional Data. Pandas is well suited for many different kinds of data: 1. Tabular data with heterogeneously-type columns. 2. Ordered and unordered time series data. 3. Arbitary matrix data with row and column labels. 4. Any other form observational/statistical data sets. The data actually need not be labeled at all to be placed into a pandas data structure.\nPandas provides three data structure - all of which are build on top of the NumPy array - all the data structures are value-mutable 1. Series (1D) - labeled, homogenous array of immutable size 2. DataFrames (2D) - labeled, heterogeneously typed, size-mutable tabular data structures 3. Panels (3D) - Labeled, size-mutable array\n::: {#cell-39 .cell _uuid=‚Äò38adb2d5da62d084057781b45de06f95cb3ed1e5‚Äô trusted=‚Äòtrue‚Äô}\nimport pandas as pd\n:::\n\n Series \n\nA Series is a single-dimensional array structures that stores homogenous data i.e., data of a single type.\nAll the elements of a Series are value-mutable and size-immutable\nData can be of multiple data types such as ndarray, lists, constants, series, dict etc.\nIndexes must be unique, hashable and have the same length as data. Defaults to np.arrange(n) if no index is passed.\nData type of each column; if none is mentioned, it will be inferred; automatically\nDeep copies data, set to false as default\n\n\n\n Creating a Series \n::: {#cell-43 .cell _uuid=‚Äò5ed63fa17b2b538e539daab302d67114c258cc42‚Äô trusted=‚Äòtrue‚Äô}\n# Creating an empty Series\nseries = pd.Series() # The Series() function creates a new Series\nprint(series)\n:::\n::: {#cell-44 .cell _uuid=‚Äòa9cfc77a3db1afb393811ab0307faac08fe39460‚Äô trusted=‚Äòtrue‚Äô}\n# Creating a series from an ndarray\n# Note that indexes are a assigned automatically if not specifies\narr = np.array([10,20,30,40,50])\nseries1 = pd.Series(arr)\nprint(series1)\n:::\n::: {#cell-45 .cell _uuid=‚Äò1201e00798671b9bac1a3403b1d5583d35986850‚Äô trusted=‚Äòtrue‚Äô}\n# Creating a series from a Python dict\n# Note that the keys of the dictionary are used to assign indexes during conversion\ndata = {'a':10, 'b':20, 'c':30}\nseries2 = pd.Series(data)\nprint(series2)\n:::\n::: {#cell-46 .cell _uuid=‚Äò2ea35ad1409457953e5f77c6ca9fd67a98e9ff2e‚Äô trusted=‚Äòtrue‚Äô}\n# Retrieving a part of the series using slicing\nprint(series1[1:4])\n:::\n\n\n DataFrames \n\nA DataFrame is a 2D data structure in which data is aligned in a tabular fashion consisting of rows & columns\nA DataFrame can be created using the following constructor - pandas.DataFrame(data, index, dtype, copy)\nData can be of multiple data types such as ndarray, list, constants, series, dict etc.\nIndex Row and column labels of the dataframe; defaults to np.arrange(n) if no index is passed\nData type of each column\nCreates a deep copy of the data, set to false as default\n\n\n\n Creating a DataFrame \n::: {#cell-50 .cell _uuid=‚Äò227c5d6f90ad6d56a34f085ceb61b4c5fed276cc‚Äô trusted=‚Äòtrue‚Äô}\n# Converting a list into a DataFrame\nlist1 = [10, 20, 30, 40]\ntable = pd.DataFrame(list1)\nprint(table)\n:::\n::: {#cell-51 .cell _uuid=‚Äò7ded0db32d7b0fc09128aaf2e5491d8f73a87426‚Äô trusted=‚Äòtrue‚Äô}\n# Creating a DataFrame from a list of dictionaries\ndata = [{'a':1, 'b':2}, {'a':2, 'b':4, 'c':8}]\ntable1 = pd.DataFrame(data)\nprint(table1)\n# NaN (not a number) is stored in areas where no data is provided\n:::\n::: {#cell-52 .cell _uuid=‚Äò1c0542d329e786a77a142b89088d8895f69cd716‚Äô trusted=‚Äòtrue‚Äô}\n# Creating a DataFrame from a list of dictionaries and accompaying row indices\ntable2 = pd.DataFrame(data, index = ['first', 'second'])\n# Dict keys become column lables\nprint(table2)\n:::\n::: {#cell-53 .cell _uuid=‚Äò4d2c55d48beb731c5524fa4513500844ea1c0746‚Äô trusted=‚Äòtrue‚Äô}\n# Converting a dictionary of series into a DataFrame\ndata1 = {'one':pd.Series([1,2,3], index = ['a', 'b', 'c']),\n        'two':pd.Series([1,2,3,4], index = ['a', 'b', 'c', 'd'])}\ntable3 = pd.DataFrame(data1)\nprint(table3)\n# the resultant index is the union of all the series indexes passed\n:::\n\n\n DataFrame - Addition & Deletion of Columns \n::: {#cell-55 .cell _uuid=‚Äò235327bdb0eaf8476a8d66b49765215dfab464ba‚Äô trusted=‚Äòtrue‚Äô}\n# A new column can be added to a DataFrame when the data is passed as a Series\ntable3['three'] = pd.Series([10,20,30], index = ['a', 'b', 'c'])\nprint(table3)\n:::\n::: {#cell-56 .cell _uuid=‚Äò6374a26f589f7d361fd8239674ecaeba0ec7bbf1‚Äô trusted=‚Äòtrue‚Äô}\n# DataFrame columns can be deleted using the del() function\ndel table3['one']\nprint(table3)\n:::\n::: {#cell-57 .cell _uuid=‚Äòe4fa44918c61d8dbeb3a00ac1e18d4bf6a5ff712‚Äô trusted=‚Äòtrue‚Äô}\n# DataFrame columns can be deleted using the pop() function\ntable3.pop('two')\nprint(table3)\n:::\n\n\n DataFrame - Addition & Deletion of Rows \n::: {#cell-59 .cell _uuid=‚Äò2eac69204e5dbdd9ce95a9d56ca175c6d0ee5118‚Äô trusted=‚Äòtrue‚Äô}\n# DataFrame rows can be selected by passing the row lable to the loc() function\nprint(table3.loc['c'])\n:::\n::: {#cell-60 .cell _uuid=‚Äòda79c9d4e4f2bb650780ae18284cedd85d29f564‚Äô trusted=‚Äòtrue‚Äô}\n# Row selection can also be done using the row index\nprint(table3.iloc[2])\n:::\n::: {#cell-61 .cell _uuid=‚Äòf1b6454c112417a9c4e6be5f4b72a36572ff5cd4‚Äô trusted=‚Äòtrue‚Äô}\n# The append() function can be used to add more rows to the DataFrame\ndata2 = {'one':pd.Series([1,2,3], index = ['a', 'b', 'c']),\n        'two':pd.Series([1,2,3,4], index = ['a', 'b', 'c', 'd'])}\ntable5 = pd.DataFrame(data2)\ntable5['three'] = pd.Series([10,20,30], index = ['a', 'b', 'c'])\nrow = pd.DataFrame([[11,13],[17,19]], columns = ['two', 'three'])\ntable6 = table5.append(row)\nprint(table6)\n:::\n::: {#cell-62 .cell _uuid=‚Äò143c1cb32ef90922dee7bef4cef27df3dd9037b7‚Äô trusted=‚Äòtrue‚Äô}\n# The drop() function can be used to drop rows whose labels are provided\ntable7 = table6.drop('a')\nprint(table7)\n:::\n\n\n Importing & Exporting Data \n::: {#cell-64 .cell _uuid=‚Äò5a3eb1090913736f1f19a808d2dcf32f873d7de0‚Äô trusted=‚Äòtrue‚Äô}\n# Data can be loaded into DataFrames from input data stored in the CSV format using the read_csv() function\ntable_csv = pd.read_csv('../input/Cars2015.csv')\n:::\n::: {#cell-65 .cell _uuid=‚Äò5f36b9c05638af526e6960d971c140dbace933d1‚Äô trusted=‚Äòtrue‚Äô}\n# Data present in DataFrames can be written to a CSV file using the to_csv() function\n# If the specified path doesn't exist, a file of the same name is automatically created\ntable_csv.to_csv('newcars2015.csv')\n:::\n::: {#cell-66 .cell _uuid=‚Äò65163b0f6c8767438c6c402297567b0daf8bda6c‚Äô trusted=‚Äòtrue‚Äô}\n# Data can be loaded into DataFrames from input data stored in the Excelsheet format using read_excel()\nsheet = pd.read_excel('cars2015.xlsx')\n:::\n::: {#cell-67 .cell _uuid=‚Äò41650dc13e896c4028bbeec8c676b65f16b5138c‚Äô trusted=‚Äòtrue‚Äô}\n# Data present in DataFrames can be written to a spreadsheet file using to_excel()\n#If the specified path doesn't exist, a file of the same name is automatically created\nsheet.to_excel('newcars2015.xlsx')\n:::",
    "crumbs": [
      "Guides",
      "Introduction to Python",
      "Introduction to Python Packages"
    ]
  },
  {
    "objectID": "Guides/intro-python/Introduction to Python Packages.html#matplotlib",
    "href": "Guides/intro-python/Introduction to Python Packages.html#matplotlib",
    "title": "Introduction to Python Packages",
    "section": " Matplotlib ",
    "text": "Matplotlib \n\nMatplotlib is a Python library that is specially designed for the development of graphs, charts etc., in order to provide interactive data visualisation\nMatplotlib is inspired from the MATLAB software and reproduces many of it‚Äôs features\n\n::: {#cell-70 .cell _uuid=‚Äòf4b547e7fafdaad4999dde4dda46dad1cf31c89f‚Äô trusted=‚Äòtrue‚Äô}\n# Import Matplotlib submodule for plotting\nimport matplotlib.pyplot as plt\n:::\n\n Plotting in Matplotlib \n::: {#cell-72 .cell _uuid=‚Äòd66714fdd84d0942fa729f7dc554b3e16b88fa6e‚Äô trusted=‚Äòtrue‚Äô}\nplt.plot([1,2,3,4]) # List of vertical co-ordinates of the points plotted\nplt.show() # Displays plot\n# Implicit X-axis values from 0 to (N-1) where N is the length of the list\n:::\n::: {#cell-73 .cell _uuid=‚Äò0c69eb3c06ed11469232121e1e5b434da4a6c417‚Äô trusted=‚Äòtrue‚Äô}\n# We can specify the values for both axes\nx = range(5) # Sequence of values for the x-axis\n# X-axis values specified - [0,1,2,3,4]\nplt.plot(x, [x1**2 for x1 in x]) # vertical co-ordinates of the points plotted: y = x^2\nplt.show()\n:::\n::: {#cell-74 .cell _uuid=‚Äò3c48d1ee2591b04ac33ea2072e5ad0d1f23d177f‚Äô trusted=‚Äòtrue‚Äô}\n# We can use NumPy to specify the values for both axes with greater precision\nx = np.arange(0, 5, 0.01)\nplt.plot(x, [x1**2 for x1 in x]) # vertical co-ordinates of the points plotted: y = x^2\nplt.show()\n:::\n\n\n Multiline Plots \n::: {#cell-76 .cell _uuid=‚Äò89882db0d96110ab8372d085aaf7cb6a887283be‚Äô trusted=‚Äòtrue‚Äô}\n# Multiple functions can be drawn on the same plot\nx = range(5)\nplt.plot(x, [x1 for x1 in x])\nplt.plot(x, [x1*x1 for x1 in x])\nplt.plot(x, [x1*x1*x1 for x1 in x])\nplt.show()\n:::\n::: {#cell-77 .cell _uuid=‚Äòde97da239b07d2349f73a3390fff7e4b5c367e44‚Äô trusted=‚Äòtrue‚Äô}\n# Different colours are used for different lines\nx = range(5)\nplt.plot(x, [x1 for x1 in x],\n         x, [x1*x1 for x1 in x],\n         x, [x1*x1*x1 for x1 in x])\nplt.show()\n:::\n\n\n Grids \n::: {#cell-79 .cell _uuid=‚Äò73b88ebef410242f116af8e509869af2a6ea19b9‚Äô trusted=‚Äòtrue‚Äô}\n# The grid() function adds a grid to the plot\n# grid() takes a single Boolean parameter\n# grid appears in the background of the plot\nx = range(5)\nplt.plot(x, [x1 for x1 in x],\n         x, [x1*2 for x1 in x],\n         x, [x1*4 for x1 in x])\nplt.grid(True)\nplt.show()\n:::\n\n\n Limiting the Axes \n::: {#cell-81 .cell _uuid=‚Äò74034e58aeb7ae32b01ed7ae319f23348c349b22‚Äô trusted=‚Äòtrue‚Äô}\n# The scale of the plot can be set using axis()\nx = range(5)\nplt.plot(x, [x1 for x1 in x],\n         x, [x1*2 for x1 in x],\n         x, [x1*4 for x1 in x])\nplt.grid(True)\nplt.axis([-1, 5, -1, 10]) # Sets new axes limits\nplt.show()\n:::\n::: {#cell-82 .cell _uuid=‚Äò072cbd4d32eb29645ca3ee15f5281e5fa9c11e06‚Äô trusted=‚Äòtrue‚Äô}\n# The scale of the plot can also be set using xlim() and ylim()\nx = range(5)\nplt.plot(x, [x1 for x1 in x],\n         x, [x1*2 for x1 in x],\n         x, [x1*4 for x1 in x])\nplt.grid(True)\nplt.xlim(-1, 5)\nplt.ylim(-1, 10)\nplt.show()\n:::\n\n\n Adding Labels \n::: {#cell-84 .cell _uuid=‚Äòbe88c8566bda7feaaf9b9c8b70bcbd36892139d3‚Äô trusted=‚Äòtrue‚Äô}\n# Labels can be added to the axes of the plot\nx = range(5)\nplt.plot(x, [x1 for x1 in x],\n         x, [x1*2 for x1 in x],\n         x, [x1*4 for x1 in x])\nplt.grid(True)\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n:::\n\n\n Adding the Title \n::: {#cell-86 .cell _uuid=‚Äòb94aae589c431fb5fcecbe03f6570f437a7d0228‚Äô trusted=‚Äòtrue‚Äô}\n# The title defines the data plotted on the graph\nx = range(5)\nplt.plot(x, [x1 for x1 in x],\n         x, [x1*2 for x1 in x],\n         x, [x1*4 for x1 in x])\nplt.grid(True)\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title(\"Polynomial Graph\") # Pass the title as a parameter to title()\nplt.show()\n:::\n\n\n Adding a Legend \n::: {#cell-88 .cell _uuid=‚Äò814d4b6c6130370dee9ab6f9e99bc2e01b65fbbf‚Äô trusted=‚Äòtrue‚Äô}\n# Legends explain the meaning of each line in the graph\nx = np.arange(5)\nplt.plot(x, x, label = 'linear')\nplt.plot(x, x*x, label = 'square')\nplt.plot(x, x*x*x, label = 'cube')\nplt.grid(True)\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title(\"Polynomial Graph\")\nplt.legend()\nplt.show()\n:::\n\n\n Adding a Markers \n::: {#cell-90 .cell _uuid=‚Äò21f95e777e4c6917c33bedf753f382a91e79633b‚Äô trusted=‚Äòtrue‚Äô}\nx = [1, 2, 3, 4, 5, 6]\ny = [11, 22, 33, 44, 55, 66]\nplt.plot(x, y, 'bo')\nfor i in range(len(x)):\n    x_cord = x[i]\n    y_cord = y[i]\n    plt.text(x_cord, y_cord, (x_cord, y_cord), fontsize = 10)\nplt.show()\n:::\n\n\n Saving Plots \n::: {#cell-92 .cell _uuid=‚Äòf7805cfc4fe4a2fa21d52cb65c9e6dce59b19307‚Äô trusted=‚Äòtrue‚Äô}\n# Plots can be saved using savefig()\nx = np.arange(5)\nplt.plot(x, x, label = 'linear')\nplt.plot(x, x*x, label = 'square')\nplt.plot(x, x*x*x, label = 'cube')\nplt.grid(True)\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title(\"Polynomial Graph\")\nplt.legend()\nplt.savefig('plot.png') # Saves an image names 'plot.png' in the current directory\nplt.show()\n:::\n\n\n Plot Types \nMatplotlib provides many types of plot formats for visualising information 1. Scatter Plot 2. Histogram 3. Bar Graph 4. Pie Chart\n\n\n Histogram \n::: {#cell-96 .cell _uuid=‚Äò07f9d1e6cc0b19b171682b2569cff740944bcc99‚Äô trusted=‚Äòtrue‚Äô}\n# Histograms display the distribution of a variable over a range of frequencies or values\ny = np.random.randn(100, 100) # 100x100 array of a Gaussian distribution\nplt.hist(y) # Function to plot the histogram takes the dataset as the parameter\nplt.show()\n:::\n::: {#cell-97 .cell _uuid=‚Äòc48f91fe7b9049934d81529961d437deba41263e‚Äô trusted=‚Äòtrue‚Äô}\n# Histogram groups values into non-overlapping categories called bins\n# Default bin value of the histogram plot is 10\ny = np.random.randn(1000)\nplt.hist(y, 100)\nplt.show()\n:::\n\n\n Bar Chart \n::: {#cell-99 .cell _uuid=‚Äòa1f25ce1fe76a701fc83510efaccb5ab576b8636‚Äô trusted=‚Äòtrue‚Äô}\n# Bar charts are used to visually compare two or more values using rectangular bars\n# Default width of each bar is 0.8 units\n# [1,2,3] Mid-point of the lower face of every bar\n# [1,4,9] Heights of the successive bars in the plot\nplt.bar([1,2,3], [1,4,9])\nplt.show()\n:::\n::: {#cell-100 .cell _uuid=‚Äòc82164448b4ec1ff485cffd03ede3de7b31d3667‚Äô trusted=‚Äòtrue‚Äô}\ndictionary = {'A':25, 'B':70, 'C':55, 'D':90}\nfor i, key in enumerate(dictionary):\n    plt.bar(i, dictionary[key]) # Each key-value pair is plotted individually as dictionaries are not iterable\nplt.show()\n:::\n::: {#cell-101 .cell _uuid=‚Äò8e368f70500b7b7c603a60854f2525ac8f737edb‚Äô trusted=‚Äòtrue‚Äô}\ndictionary = {'A':25, 'B':70, 'C':55, 'D':90}\nfor i, key in enumerate(dictionary):\n    plt.bar(i, dictionary[key])\nplt.xticks(np.arange(len(dictionary)), dictionary.keys()) # Adds the keys as labels on the x-axis\nplt.show()\n:::\n\n\n Pie Chart \n::: {#cell-103 .cell _uuid=‚Äò71823d0849f9ca477619d95940cd8c15da89898f‚Äô trusted=‚Äòtrue‚Äô}\nplt.figure(figsize = (3,3)) # Size of the plot in inches\nx = [40, 20, 5] # Proportions of the sectors\nlabels = ['Bikes', 'Cars', 'Buses']\nplt.pie(x, labels = labels)\nplt.show()\n:::\n\n\n Scatter Plot \n::: {#cell-105 .cell _uuid=‚Äò6c0584e7fa4d5ee9a12b8912552a840ea7055955‚Äô trusted=‚Äòtrue‚Äô}\n# Scatter plots display values for two sets of data, visualised as a collection of points\n# Two Gaussion distribution plotted\nx = np.random.rand(1000)\ny = np.random.rand(1000)\nplt.scatter(x, y)\nplt.show()\n:::\n\n\n Styling \n::: {#cell-107 .cell _uuid=‚Äò8bdecd2648a9546f7ce5855125a21ffc8fea30ce‚Äô trusted=‚Äòtrue‚Äô}\n# Matplotlib allows to choose custom colours for plots\ny = np.arange(1, 3)\nplt.plot(y, 'y') # Specifying line colours\nplt.plot(y+5, 'm')\nplt.plot(y+10, 'c')\nplt.show()\n:::\nColor code: 1. b = Blue 2. c = Cyan 3. g = Green 4. k = Black 5. m = Magenta 6. r = Red 7. w = White 8. y = Yellow\n::: {#cell-109 .cell _uuid=‚Äò20cf6a6db7f23468ec7e0faa4d2e01207cd63f70‚Äô trusted=‚Äòtrue‚Äô}\n# Matplotlib allows different line styles for plots\ny = np.arange(1, 100)\nplt.plot(y, '--', y*5, '-.', y*10, ':')\nplt.show()\n# - Solid line\n# -- Dashed line\n# -. Dash-Dot line\n# : Dotted Line\n:::\n::: {#cell-110 .cell _uuid=‚Äòbd8de81dda276dc4517e302a628de7b35cd3886d‚Äô trusted=‚Äòtrue‚Äô}\n# Matplotlib provides customization options for markers\ny = np.arange(1, 3, 0.2)\nplt.plot(y, '*',\n        y+0.5, 'o',\n        y+1, 'D',\n        y+2, '^',\n        y+3, 's') # Specifying line styling\nplt.show()\n:::",
    "crumbs": [
      "Guides",
      "Introduction to Python",
      "Introduction to Python Packages"
    ]
  },
  {
    "objectID": "glossary.html",
    "href": "glossary.html",
    "title": "Glossary of ML terms",
    "section": "",
    "text": "Term\nMeaning\n\n\n\n\nML\nMachine learning\n\n\nEDA\nExploratory data analysis\n\n\nSVM\nSupport vector machines\n\n\nNLP\nNatural language processing\n\n\nPCA\nPrincipal component analysis\n\n\nCNN\nConvolutional neural network",
    "crumbs": [
      "Glossary of ML terms"
    ]
  },
  {
    "objectID": "external-guides.html",
    "href": "external-guides.html",
    "title": "External guides",
    "section": "",
    "text": "PyTorch Geometric: Introduction by Example",
    "crumbs": [
      "External guides"
    ]
  },
  {
    "objectID": "external-guides.html#graph-neural-networks",
    "href": "external-guides.html#graph-neural-networks",
    "title": "External guides",
    "section": "",
    "text": "PyTorch Geometric: Introduction by Example",
    "crumbs": [
      "External guides"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Nexus: ML+X Community Shared Resources",
    "section": "",
    "text": "ML+X is a community of practice that brings together students, researchers, and industry professionals who share an interest in using machine learning (ML) methods (e.g., regression, classification, clustering, NLP, reinforcement learning, etc.) to advance their work (X). Community events and activities aim to help ML practitioners explore the challenges and pitfalls of ML, share knowledge and resources, and support each others‚Äô work. Join the community to learn more!\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n\n\n\n\n\n\n\n\n\n\nUsing Reticulate\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to Python\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to Machine Learning\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nHow to get started with Visual Studio Code\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nEDA example\n\n\n\n\n\nAnother EDA example\n\n\n\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nAn Example\n\n\n\n\n\nAn exploratory data analysis example \n\n\n\n\n\n1 min\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Home"
    ]
  }
]